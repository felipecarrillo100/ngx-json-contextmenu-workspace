import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { OverlayRef } from '@angular/cdk/overlay';
import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';
import { ContextMenuItemDirective } from '../../directives/context-menu-item/context-menu-item.directive';
import { ContextMenuCloseLeafEvent, ContextMenuOpenEvent } from '../context-menu/context-menu.component.interface';
import * as i0 from "@angular/core";
/**
 * For testing purpose only
 */
export declare const TESTING_WRAPPER: {
    ActiveDescendantKeyManager: typeof ActiveDescendantKeyManager;
};
export declare class ContextMenuContentComponent<T> implements OnInit, OnDestroy, AfterViewInit {
    _elementRef: ElementRef<HTMLElement>;
    /**
     * The list of `ContextMenuItemDirective` that represent each menu items
     */
    menuDirectives: ContextMenuItemDirective<T>[];
    /**
     * The item on which the menu act
     */
    value?: T;
    /**
     * The orientation of the component
     * @see https://developer.mozilla.org/fr/docs/Web/HTML/Global_attributes/dir
     */
    dir: 'ltr' | 'rtl' | undefined;
    /**
     * The parent menu of the instance
     */
    parentContextMenu: ContextMenuContentComponent<T>;
    /**
     * A CSS class to apply a theme to the the menu
     */
    menuClass: string;
    /**
     * The overlay ref associated to the instance
     */
    overlayRef: OverlayRef | undefined;
    /**
     * Wether the instance is a leaf menu or not
     */
    isLeaf: boolean;
    /**
     * Emit when a menu item is selected
     */
    execute: EventEmitter<{
        event: MouseEvent | KeyboardEvent;
        value?: T;
        menuDirective: ContextMenuItemDirective<T>;
    }>;
    /**
     * Emit when a sub menu is opened
     */
    openSubMenu: EventEmitter<ContextMenuOpenEvent<T>>;
    /**
     * Emit when a leaf menu is closed
     */
    closeLeafMenu: EventEmitter<ContextMenuCloseLeafEvent>;
    /**
     * Emit when sub menus are closed
     */
    closeSubMenus: EventEmitter<void>;
    /**
     * Emit when all menus is closed
     */
    closeAllMenus: EventEmitter<{
        event: MouseEvent;
    }>;
    /**
     * @internal
     */
    liElementRefs: QueryList<ElementRef>;
    private keyManager;
    private subscription;
    constructor(_elementRef: ElementRef<HTMLElement>);
    /**
     * @internal
     */
    ngOnInit(): void;
    /**
     * @internal
     */
    ngAfterViewInit(): void;
    /**
     * @internal
     */
    ngOnDestroy(): void;
    /**
     * @internal
     */
    onKeyArrowDownOrUp(event: KeyboardEvent): void;
    /**
     * @internal
     */
    onKeyArrowRight(event: KeyboardEvent): void;
    /**
     * @internal
     */
    onKeyArrowLeft(event: KeyboardEvent): void;
    /**
     * @internal
     */
    onKeyEnterOrSpace(event: KeyboardEvent): void;
    /**
     * @internal
     */
    onKeyArrowEscape(event: KeyboardEvent): void;
    /**
     * @internal
     */
    onClickOrRightClick(event: MouseEvent): void;
    /**
     * @internal
     */
    stopEvent(event: MouseEvent): void;
    /**
     * @internal
     */
    isMenuItemDisabled(menuItem: ContextMenuItemDirective<T>): boolean;
    /**
     * @internal
     */
    isMenuItemVisible(menuItem: ContextMenuItemDirective<T>): boolean;
    /**
     * @internal
     */
    onOpenSubMenu(menuItem: ContextMenuItemDirective<T>, event: MouseEvent | KeyboardEvent): void;
    /**
     * @internal
     */
    onMenuItemSelect(menuItem: ContextMenuItemDirective<T>, event: MouseEvent | KeyboardEvent): void;
    private triggerExecute;
    private setupDirectives;
    private openActiveItemSubMenu;
    private closeActiveItemSubMenu;
    private cancelEvent;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContextMenuContentComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ContextMenuContentComponent<any>, "context-menu-content", never, { "menuDirectives": { "alias": "menuDirectives"; "required": false; }; "value": { "alias": "value"; "required": false; }; "dir": { "alias": "dir"; "required": false; }; "parentContextMenu": { "alias": "parentContextMenu"; "required": false; }; "menuClass": { "alias": "menuClass"; "required": false; }; "overlayRef": { "alias": "overlayRef"; "required": false; }; "isLeaf": { "alias": "isLeaf"; "required": false; }; }, { "execute": "execute"; "openSubMenu": "openSubMenu"; "closeLeafMenu": "closeLeafMenu"; "closeSubMenus": "closeSubMenus"; "closeAllMenus": "closeAllMenus"; }, never, never, false, never>;
}
