import { ComponentPortal } from '@angular/cdk/portal';
import { Component, ContentChildren, ElementRef, EventEmitter, Input, Output, ViewEncapsulation, } from '@angular/core';
import { Subscription } from 'rxjs';
import { ContextMenuItemDirective } from '../../directives/context-menu-item/context-menu-item.directive';
import { evaluateIfFunction } from '../../helper/evaluate';
import { ContextMenuContentComponent } from '../context-menu-content/context-menu-content.component';
import { getPositionsToAnchorElement, getPositionsToXY, } from './context-menu.component.helpers';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "../../services/context-menu-stack/context-menu-stack.service";
import * as i3 from "../../services/context-menu-event/context-menu-event.service";
export class ContextMenuComponent {
    constructor(overlay, scrollStrategy, contextMenuStack, contextMenuEventService) {
        this.overlay = overlay;
        this.scrollStrategy = scrollStrategy;
        this.contextMenuStack = contextMenuStack;
        this.contextMenuEventService = contextMenuEventService;
        /**
         * A CSS class to apply to the context menu overlay, ideal for theming and custom styling
         */
        this.menuClass = '';
        /**
         * Disable the whole context menu
         */
        this.disabled = false;
        /**
         * Emit when the menu is opened
         */
        this.open = new EventEmitter();
        /**
         * Emit when the menu is closed
         */
        this.close = new EventEmitter();
        /**
         * @internal
         */
        this.visibleMenuItems = [];
        this.subscription = new Subscription();
    }
    /**
     * @internal
     */
    ngOnInit() {
        const subscription = this.contextMenuEventService.onShow.subscribe((menuEvent) => {
            this.onMenuEvent(menuEvent);
        });
        this.subscription.add(subscription);
    }
    /**
     * @internal
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    /**
     * Open context menu
     */
    openContextMenu(context) {
        let positionStrategy;
        if (context.anchoredTo === 'position') {
            positionStrategy = this.overlay
                .position()
                .flexibleConnectedTo({
                x: context.x,
                y: context.y,
            })
                .withPositions(getPositionsToXY(context.dir));
            this.closeAllContextMenus();
        }
        else {
            const { anchorElement, parentContextMenu } = context;
            positionStrategy = this.overlay
                .position()
                .flexibleConnectedTo(new ElementRef(anchorElement))
                .withPositions(getPositionsToAnchorElement(parentContextMenu.dir));
            this.contextMenuStack.destroySubMenus(parentContextMenu);
        }
        const overlayRef = this.overlay.create({
            positionStrategy,
            panelClass: 'ngx-contextmenu',
            scrollStrategy: this.scrollStrategy.close(),
        });
        this.attachContextMenu(overlayRef, context);
    }
    onMenuEvent(event) {
        if (this.disabled) {
            return;
        }
        const { contextMenu, value } = event;
        if (contextMenu && contextMenu !== this) {
            return;
        }
        this.value = value;
        this.setVisibleMenuItems();
        this.openContextMenu({
            ...event,
            menuItemDirectives: this.visibleMenuItems,
            menuClass: this.menuClass,
            dir: this.dir,
        });
        this.open.next(event);
    }
    attachContextMenu(overlayRef, context) {
        const { value, menuItemDirectives } = context;
        const contextMenuContentRef = overlayRef.attach(new ComponentPortal(ContextMenuContentComponent));
        const { instance: contextMenuContentComponent } = contextMenuContentRef;
        contextMenuContentComponent.value = value;
        contextMenuContentComponent.menuDirectives = menuItemDirectives;
        contextMenuContentComponent.overlayRef = overlayRef;
        contextMenuContentComponent.isLeaf = true;
        contextMenuContentComponent.menuClass = this.getMenuClass(context);
        contextMenuContentComponent.dir = this.getDir(context);
        this.contextMenuStack.push({
            overlayRef,
            contextMenuContentComponent,
        });
        const subscriptions = new Subscription();
        subscriptions.add(contextMenuContentComponent.execute.subscribe(() => this.closeAllContextMenus()));
        subscriptions.add(contextMenuContentComponent.closeAllMenus.subscribe(() => this.closeAllContextMenus()));
        subscriptions.add(contextMenuContentComponent.closeLeafMenu.subscribe((closeLeafMenuEvent) => this.destroyLeafMenu(!!closeLeafMenuEvent.excludeRootMenu)));
        subscriptions.add(contextMenuContentComponent.openSubMenu.subscribe((openSubMenuEvent) => {
            this.contextMenuStack.destroySubMenus(contextMenuContentComponent);
            if (!openSubMenuEvent.contextMenu) {
                contextMenuContentComponent.isLeaf = true;
                return;
            }
            contextMenuContentComponent.isLeaf = false;
            this.contextMenuEventService.show(openSubMenuEvent);
        }));
        subscriptions.add(contextMenuContentComponent.closeSubMenus.subscribe(() => {
            this.contextMenuStack.destroySubMenus(contextMenuContentComponent);
        }));
        contextMenuContentRef.onDestroy(() => {
            this.close.next();
            menuItemDirectives.forEach((menuItem) => (menuItem.isActive = false));
            subscriptions.unsubscribe();
        });
        contextMenuContentRef.changeDetectorRef.detectChanges();
    }
    getMenuClass(event) {
        return (event.menuClass ||
            (event.anchoredTo === 'element' && event?.parentContextMenu?.menuClass) ||
            '');
    }
    getDir(event) {
        return (event.dir ||
            (event.anchoredTo === 'element' && event?.parentContextMenu?.dir) ||
            undefined);
    }
    closeAllContextMenus() {
        this.contextMenuStack.closeAll();
    }
    destroyLeafMenu(excludeRootMenu) {
        this.contextMenuStack.closeLeafMenu(excludeRootMenu);
    }
    isMenuItemVisible(menuItem) {
        return evaluateIfFunction(menuItem.visible, this.value);
    }
    setVisibleMenuItems() {
        this.visibleMenuItems = this.menuItems.filter((menuItem) => this.isMenuItemVisible(menuItem));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ContextMenuComponent, deps: [{ token: i1.Overlay }, { token: i1.ScrollStrategyOptions }, { token: i2.ContextMenuStackService }, { token: i3.ContextMenuEventService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: ContextMenuComponent, selector: "context-menu", inputs: { menuClass: "menuClass", disabled: "disabled", dir: "dir" }, outputs: { open: "open", close: "close" }, queries: [{ propertyName: "menuItems", predicate: ContextMenuItemDirective }], ngImport: i0, template: '', isInline: true, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ContextMenuComponent, decorators: [{
            type: Component,
            args: [{
                    encapsulation: ViewEncapsulation.None,
                    selector: 'context-menu',
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i1.ScrollStrategyOptions }, { type: i2.ContextMenuStackService }, { type: i3.ContextMenuEventService }]; }, propDecorators: { menuClass: [{
                type: Input
            }], disabled: [{
                type: Input
            }], dir: [{
                type: Input
            }], open: [{
                type: Output
            }], close: [{
                type: Output
            }], menuItems: [{
                type: ContentChildren,
                args: [ContextMenuItemDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,