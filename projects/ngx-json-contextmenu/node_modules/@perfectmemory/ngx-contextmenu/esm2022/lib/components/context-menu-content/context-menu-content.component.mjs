import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, HostListener, Input, Output, QueryList, ViewChildren, } from '@angular/core';
import { Subscription } from 'rxjs';
import { evaluateIfFunction } from '../../helper/evaluate';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
const ARROW_LEFT_KEYCODE = 37;
const ARROW_RIGHT_KEYCODE = 39;
/**
 * For testing purpose only
 */
export const TESTING_WRAPPER = {
    ActiveDescendantKeyManager,
};
export class ContextMenuContentComponent {
    // TODO: should be private but issue in spec with NullInjectorError: No provider for ElementRef!
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        /**
         * The list of `ContextMenuItemDirective` that represent each menu items
         */
        this.menuDirectives = [];
        /**
         * A CSS class to apply a theme to the the menu
         */
        this.menuClass = '';
        /**
         * Wether the instance is a leaf menu or not
         */
        this.isLeaf = false;
        /**
         * Emit when a menu item is selected
         */
        this.execute = new EventEmitter();
        /**
         * Emit when a sub menu is opened
         */
        this.openSubMenu = new EventEmitter();
        /**
         * Emit when a leaf menu is closed
         */
        this.closeLeafMenu = new EventEmitter();
        /**
         * Emit when sub menus are closed
         */
        this.closeSubMenus = new EventEmitter();
        /**
         * Emit when all menus is closed
         */
        this.closeAllMenus = new EventEmitter();
        this.subscription = new Subscription();
    }
    /**
     * @internal
     */
    ngOnInit() {
        this.setupDirectives();
    }
    /**
     * @internal
     */
    ngAfterViewInit() {
        this.overlayRef?.updatePosition();
    }
    /**
     * @internal
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    /**
     * @internal
     */
    onKeyArrowDownOrUp(event) {
        if (!this.isLeaf) {
            return;
        }
        this.keyManager.onKeydown(event);
    }
    /**
     * @internal
     */
    onKeyArrowRight(event) {
        if (!this.isLeaf) {
            return;
        }
        if (this.dir === 'rtl') {
            this.closeActiveItemSubMenu(event);
            return;
        }
        this.openActiveItemSubMenu(event);
    }
    /**
     * @internal
     */
    onKeyArrowLeft(event) {
        if (!this.isLeaf) {
            return;
        }
        if (this.dir === 'rtl') {
            this.openActiveItemSubMenu(event);
            return;
        }
        this.closeActiveItemSubMenu(event);
    }
    /**
     * @internal
     */
    onKeyEnterOrSpace(event) {
        if (!this.isLeaf) {
            return;
        }
        if (!this.keyManager.activeItem) {
            return;
        }
        this.onMenuItemSelect(this.keyManager.activeItem, event);
    }
    /**
     * @internal
     */
    onKeyArrowEscape(event) {
        if (!this.isLeaf) {
            return;
        }
        this.closeActiveItemSubMenu(event);
    }
    /**
     * @internal
     */
    onClickOrRightClick(event) {
        if (event.type === 'click' && event.button === 2) {
            return;
        }
        if (this._elementRef.nativeElement.contains(event.target)) {
            return;
        }
        this.closeAllMenus.emit({ event });
    }
    /**
     * @internal
     */
    stopEvent(event) {
        event.stopPropagation();
    }
    /**
     * @internal
     */
    isMenuItemDisabled(menuItem) {
        return evaluateIfFunction(menuItem.disabled, this.value);
    }
    /**
     * @internal
     */
    isMenuItemVisible(menuItem) {
        return evaluateIfFunction(menuItem.visible, this.value);
    }
    /**
     * @internal
     */
    onOpenSubMenu(menuItem, event) {
        if (!menuItem.subMenu) {
            this.closeSubMenus.next();
        }
        if (this.keyManager.activeItemIndex === null || !menuItem.subMenu) {
            return;
        }
        const anchorElementRef = this.liElementRefs.toArray()[this.keyManager.activeItemIndex];
        const anchorElement = anchorElementRef && anchorElementRef.nativeElement;
        if (anchorElement && event instanceof KeyboardEvent) {
            this.openSubMenu.emit({
                anchoredTo: 'element',
                anchorElement,
                contextMenu: menuItem.subMenu,
                value: this.value,
                parentContextMenu: this,
            });
        }
        else if (event.currentTarget) {
            this.openSubMenu.emit({
                anchoredTo: 'element',
                anchorElement: event.currentTarget,
                contextMenu: menuItem.subMenu,
                value: this.value,
                parentContextMenu: this,
            });
        }
        else {
            this.openSubMenu.emit({
                anchoredTo: 'position',
                x: event.clientX,
                y: event.clientY,
                contextMenu: menuItem.subMenu,
                value: this.value,
            });
        }
    }
    /**
     * @internal
     */
    onMenuItemSelect(menuItem, event) {
        this.cancelEvent(event);
        this.onOpenSubMenu(menuItem, event);
        if (!menuItem.subMenu) {
            this.triggerExecute(menuItem, event);
        }
    }
    triggerExecute(menuItem, event) {
        menuItem.triggerExecute(event, this.value);
    }
    setupDirectives() {
        this.menuDirectives.forEach((menuDirective) => {
            menuDirective.value = this.value;
            this.subscription.add(menuDirective.execute.subscribe((event) => this.execute.emit({ ...event, menuDirective })));
        });
        const queryList = new QueryList();
        queryList.reset(this.menuDirectives);
        this.keyManager = new TESTING_WRAPPER.ActiveDescendantKeyManager(queryList).withWrap();
    }
    openActiveItemSubMenu(event) {
        if (this.keyManager.activeItemIndex === null) {
            return;
        }
        this.cancelEvent(event);
        if (this.keyManager.activeItem) {
            this.onOpenSubMenu(this.keyManager.activeItem, event);
        }
    }
    closeActiveItemSubMenu(event) {
        if (this.keyManager.activeItemIndex === null) {
            return;
        }
        this.cancelEvent(event);
        this.closeLeafMenu.emit({
            excludeRootMenu: this.dir === 'rtl'
                ? event.keyCode === ARROW_RIGHT_KEYCODE
                : event.keyCode === ARROW_LEFT_KEYCODE,
            event,
        });
    }
    cancelEvent(event) {
        if (!event || !event.target) {
            return;
        }
        const target = event.target;
        if (['INPUT', 'TEXTAREA', 'SELECT'].includes(target.tagName) ||
            target.isContentEditable) {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ContextMenuContentComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: ContextMenuContentComponent, selector: "context-menu-content", inputs: { menuDirectives: "menuDirectives", value: "value", dir: "dir", parentContextMenu: "parentContextMenu", menuClass: "menuClass", overlayRef: "overlayRef", isLeaf: "isLeaf" }, outputs: { execute: "execute", openSubMenu: "openSubMenu", closeLeafMenu: "closeLeafMenu", closeSubMenus: "closeSubMenus", closeAllMenus: "closeAllMenus" }, host: { listeners: { "window:keydown.ArrowDown": "onKeyArrowDownOrUp($event)", "window:keydown.ArrowUp": "onKeyArrowDownOrUp($event)", "window:keydown.ArrowRight": "onKeyArrowRight($event)", "window:keydown.ArrowLeft": "onKeyArrowLeft($event)", "window:keydown.Enter": "onKeyEnterOrSpace($event)", "window:keydown.Space": "onKeyEnterOrSpace($event)", "window:keydown.Escape": "onKeyArrowEscape($event)", "document:click": "onClickOrRightClick($event)", "document:contextmenu": "onClickOrRightClick($event)" }, properties: { "attr.dir": "this.dir" } }, viewQueries: [{ propertyName: "liElementRefs", predicate: ["li"], descendants: true }], ngImport: i0, template: "<div class=\"ngx-contextmenu\" [ngClass]=\"menuClass\" [attr.dir]=\"dir\">\n  <ul #menu class=\"ngx-contextmenu--dropdown-menu\" role=\"menu\" tabindex=\"0\">\n    <li\n      #li\n      *ngFor=\"let menuDirective of menuDirectives; let i = index\"\n      [class.disabled]=\"isMenuItemDisabled(menuDirective)\"\n      [class.divider]=\"menuDirective.divider\"\n      [class.active]=\"\n        menuDirective.isActive && !isMenuItemDisabled(menuDirective)\n      \"\n      [attr.role]=\"menuDirective.divider ? 'separator' : undefined\"\n      role=\"none\"\n    >\n      <hr *ngIf=\"menuDirective.divider\" role=\"separator\" />\n      <button\n        *ngIf=\"!menuDirective.divider && !menuDirective.passive\"\n        type=\"button\"\n        role=\"menuitem\"\n        class=\"ngx-contextmenu--item-content\"\n        [attr.aria-haspopup]=\"!!menuDirective.subMenu\"\n        [class.ngx-contextmenu--parent-menu]=\"!!menuDirective.subMenu\"\n        [class.active]=\"\n          menuDirective.isActive && !isMenuItemDisabled(menuDirective)\n        \"\n        [class.disabled]=\"isMenuItemDisabled(menuDirective)\"\n        [attr.disabled]=\"isMenuItemDisabled(menuDirective) ? 'disabled' : null\"\n        (click)=\"onMenuItemSelect(menuDirective, $event)\"\n        (mouseenter)=\"onOpenSubMenu(menuDirective, $event)\"\n      >\n        <ng-template\n          [ngTemplateOutlet]=\"menuDirective.template\"\n          [ngTemplateOutletContext]=\"{ item: value }\"\n        ></ng-template>\n      </button>\n\n      <span\n        *ngIf=\"!menuDirective.divider && menuDirective.passive\"\n        class=\"ngx-contextmenu--item-content ngx-contextmenu--item-content-passive\"\n        role=\"menuitem\"\n        (click)=\"stopEvent($event)\"\n        (contextmenu)=\"stopEvent($event)\"\n        [class.disabled]=\"isMenuItemDisabled(menuDirective)\"\n      >\n        <ng-template\n          [ngTemplateOutlet]=\"menuDirective.template\"\n          [ngTemplateOutletContext]=\"{ item: value }\"\n        ></ng-template>\n      </span>\n    </li>\n  </ul>\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ContextMenuContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'context-menu-content', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"ngx-contextmenu\" [ngClass]=\"menuClass\" [attr.dir]=\"dir\">\n  <ul #menu class=\"ngx-contextmenu--dropdown-menu\" role=\"menu\" tabindex=\"0\">\n    <li\n      #li\n      *ngFor=\"let menuDirective of menuDirectives; let i = index\"\n      [class.disabled]=\"isMenuItemDisabled(menuDirective)\"\n      [class.divider]=\"menuDirective.divider\"\n      [class.active]=\"\n        menuDirective.isActive && !isMenuItemDisabled(menuDirective)\n      \"\n      [attr.role]=\"menuDirective.divider ? 'separator' : undefined\"\n      role=\"none\"\n    >\n      <hr *ngIf=\"menuDirective.divider\" role=\"separator\" />\n      <button\n        *ngIf=\"!menuDirective.divider && !menuDirective.passive\"\n        type=\"button\"\n        role=\"menuitem\"\n        class=\"ngx-contextmenu--item-content\"\n        [attr.aria-haspopup]=\"!!menuDirective.subMenu\"\n        [class.ngx-contextmenu--parent-menu]=\"!!menuDirective.subMenu\"\n        [class.active]=\"\n          menuDirective.isActive && !isMenuItemDisabled(menuDirective)\n        \"\n        [class.disabled]=\"isMenuItemDisabled(menuDirective)\"\n        [attr.disabled]=\"isMenuItemDisabled(menuDirective) ? 'disabled' : null\"\n        (click)=\"onMenuItemSelect(menuDirective, $event)\"\n        (mouseenter)=\"onOpenSubMenu(menuDirective, $event)\"\n      >\n        <ng-template\n          [ngTemplateOutlet]=\"menuDirective.template\"\n          [ngTemplateOutletContext]=\"{ item: value }\"\n        ></ng-template>\n      </button>\n\n      <span\n        *ngIf=\"!menuDirective.divider && menuDirective.passive\"\n        class=\"ngx-contextmenu--item-content ngx-contextmenu--item-content-passive\"\n        role=\"menuitem\"\n        (click)=\"stopEvent($event)\"\n        (contextmenu)=\"stopEvent($event)\"\n        [class.disabled]=\"isMenuItemDisabled(menuDirective)\"\n      >\n        <ng-template\n          [ngTemplateOutlet]=\"menuDirective.template\"\n          [ngTemplateOutletContext]=\"{ item: value }\"\n        ></ng-template>\n      </span>\n    </li>\n  </ul>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { menuDirectives: [{
                type: Input
            }], value: [{
                type: Input
            }], dir: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.dir']
            }], parentContextMenu: [{
                type: Input
            }], menuClass: [{
                type: Input
            }], overlayRef: [{
                type: Input
            }], isLeaf: [{
                type: Input
            }], execute: [{
                type: Output
            }], openSubMenu: [{
                type: Output
            }], closeLeafMenu: [{
                type: Output
            }], closeSubMenus: [{
                type: Output
            }], closeAllMenus: [{
                type: Output
            }], liElementRefs: [{
                type: ViewChildren,
                args: ['li']
            }], onKeyArrowDownOrUp: [{
                type: HostListener,
                args: ['window:keydown.ArrowDown', ['$event']]
            }, {
                type: HostListener,
                args: ['window:keydown.ArrowUp', ['$event']]
            }], onKeyArrowRight: [{
                type: HostListener,
                args: ['window:keydown.ArrowRight', ['$event']]
            }], onKeyArrowLeft: [{
                type: HostListener,
                args: ['window:keydown.ArrowLeft', ['$event']]
            }], onKeyEnterOrSpace: [{
                type: HostListener,
                args: ['window:keydown.Enter', ['$event']]
            }, {
                type: HostListener,
                args: ['window:keydown.Space', ['$event']]
            }], onKeyArrowEscape: [{
                type: HostListener,
                args: ['window:keydown.Escape', ['$event']]
            }], onClickOrRightClick: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }, {
                type: HostListener,
                args: ['document:contextmenu', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1tZW51LWNvbnRlbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWNvbnRleHRtZW51L3NyYy9saWIvY29tcG9uZW50cy9jb250ZXh0LW1lbnUtY29udGVudC9jb250ZXh0LW1lbnUtY29udGVudC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtY29udGV4dG1lbnUvc3JjL2xpYi9jb21wb25lbnRzL2NvbnRleHQtbWVudS1jb250ZW50L2NvbnRleHQtbWVudS1jb250ZW50LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRS9ELE9BQU8sRUFFTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUVULFlBQVksRUFDWixXQUFXLEVBQ1gsWUFBWSxFQUNaLEtBQUssRUFHTCxNQUFNLEVBQ04sU0FBUyxFQUNULFlBQVksR0FDYixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXBDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7QUFNM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUM7QUFDOUIsTUFBTSxtQkFBbUIsR0FBRyxFQUFFLENBQUM7QUFFL0I7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUc7SUFDN0IsMEJBQTBCO0NBQzNCLENBQUM7QUFPRixNQUFNLE9BQU8sMkJBQTJCO0lBNkZ0QyxnR0FBZ0c7SUFDaEcsWUFBbUIsV0FBb0M7UUFBcEMsZ0JBQVcsR0FBWCxXQUFXLENBQXlCO1FBM0Z2RDs7V0FFRztRQUVJLG1CQUFjLEdBQWtDLEVBQUUsQ0FBQztRQXNCMUQ7O1dBRUc7UUFFSSxjQUFTLEdBQVcsRUFBRSxDQUFDO1FBUTlC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RCxZQUFZO3VCQUFDLHdCQUF3QixFQUFFLENBQUMsUUFBUSxDQUFDO2dCQWEzQyxlQUFlO3NCQURyQixZQUFZO3VCQUFDLDJCQUEyQixFQUFFLENBQUMsUUFBUSxDQUFDO2dCQWtCOUMsY0FBYztzQkFEcEIsWUFBWTt1QkFBQywwQkFBMEIsRUFBRSxDQUFDLFFBQVEsQ0FBQztnQkFtQjdDLGlCQUFpQjtzQkFGdkIsWUFBWTt1QkFBQyxzQkFBc0IsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7c0JBQy9DLFlBQVk7dUJBQUMsc0JBQXNCLEVBQUUsQ0FBQyxRQUFRLENBQUM7Z0JBaUJ6QyxnQkFBZ0I7c0JBRHRCLFlBQVk7dUJBQUMsdUJBQXVCLEVBQUUsQ0FBQyxRQUFRLENBQUM7Z0JBYzFDLG1CQUFtQjtzQkFGekIsWUFBWTt1QkFBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7c0JBQ3pDLFlBQVk7dUJBQUMsc0JBQXNCLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3RpdmVEZXNjZW5kYW50S2V5TWFuYWdlciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IE92ZXJsYXlSZWYgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RCaW5kaW5nLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBRdWVyeUxpc3QsXG4gIFZpZXdDaGlsZHJlbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbnRleHRNZW51SXRlbURpcmVjdGl2ZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvY29udGV4dC1tZW51LWl0ZW0vY29udGV4dC1tZW51LWl0ZW0uZGlyZWN0aXZlJztcbmltcG9ydCB7IGV2YWx1YXRlSWZGdW5jdGlvbiB9IGZyb20gJy4uLy4uL2hlbHBlci9ldmFsdWF0ZSc7XG5pbXBvcnQge1xuICBDb250ZXh0TWVudUNsb3NlTGVhZkV2ZW50LFxuICBDb250ZXh0TWVudU9wZW5FdmVudCxcbn0gZnJvbSAnLi4vY29udGV4dC1tZW51L2NvbnRleHQtbWVudS5jb21wb25lbnQuaW50ZXJmYWNlJztcblxuY29uc3QgQVJST1dfTEVGVF9LRVlDT0RFID0gMzc7XG5jb25zdCBBUlJPV19SSUdIVF9LRVlDT0RFID0gMzk7XG5cbi8qKlxuICogRm9yIHRlc3RpbmcgcHVycG9zZSBvbmx5XG4gKi9cbmV4cG9ydCBjb25zdCBURVNUSU5HX1dSQVBQRVIgPSB7XG4gIEFjdGl2ZURlc2NlbmRhbnRLZXlNYW5hZ2VyLFxufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY29udGV4dC1tZW51LWNvbnRlbnQnLFxuICB0ZW1wbGF0ZVVybDogJy4vY29udGV4dC1tZW51LWNvbnRlbnQuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgQ29udGV4dE1lbnVDb250ZW50Q29tcG9uZW50PFQ+XG4gIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXRcbntcbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIGBDb250ZXh0TWVudUl0ZW1EaXJlY3RpdmVgIHRoYXQgcmVwcmVzZW50IGVhY2ggbWVudSBpdGVtc1xuICAgKi9cbiAgQElucHV0KClcbiAgcHVibGljIG1lbnVEaXJlY3RpdmVzOiBDb250ZXh0TWVudUl0ZW1EaXJlY3RpdmU8VD5bXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBUaGUgaXRlbSBvbiB3aGljaCB0aGUgbWVudSBhY3RcbiAgICovXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyB2YWx1ZT86IFQ7XG5cbiAgLyoqXG4gICAqIFRoZSBvcmllbnRhdGlvbiBvZiB0aGUgY29tcG9uZW50XG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZnIvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy9kaXJcbiAgICovXG4gIEBJbnB1dCgpXG4gIEBIb3N0QmluZGluZygnYXR0ci5kaXInKVxuICBwdWJsaWMgZGlyOiAnbHRyJyB8ICdydGwnIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBUaGUgcGFyZW50IG1lbnUgb2YgdGhlIGluc3RhbmNlXG4gICAqL1xuICBASW5wdXQoKVxuICBwdWJsaWMgcGFyZW50Q29udGV4dE1lbnUhOiBDb250ZXh0TWVudUNvbnRlbnRDb21wb25lbnQ8VD47XG5cbiAgLyoqXG4gICAqIEEgQ1NTIGNsYXNzIHRvIGFwcGx5IGEgdGhlbWUgdG8gdGhlIHRoZSBtZW51XG4gICAqL1xuICBASW5wdXQoKVxuICBwdWJsaWMgbWVudUNsYXNzOiBzdHJpbmcgPSAnJztcblxuICAvKipcbiAgICogVGhlIG92ZXJsYXkgcmVmIGFzc29jaWF0ZWQgdG8gdGhlIGluc3RhbmNlXG4gICAqL1xuICBASW5wdXQoKVxuICBwdWJsaWMgb3ZlcmxheVJlZjogT3ZlcmxheVJlZiB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogV2V0aGVyIHRoZSBpbnN0YW5jZSBpcyBhIGxlYWYgbWVudSBvciBub3RcbiAgICovXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBpc0xlYWYgPSBmYWxzZTtcblxuICAvKipcbiAgICogRW1pdCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkXG4gICAqL1xuICBAT3V0cHV0KClcbiAgcHVibGljIGV4ZWN1dGU6IEV2ZW50RW1pdHRlcjx7XG4gICAgZXZlbnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50O1xuICAgIHZhbHVlPzogVDtcbiAgICBtZW51RGlyZWN0aXZlOiBDb250ZXh0TWVudUl0ZW1EaXJlY3RpdmU8VD47XG4gIH0+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIC8qKlxuICAgKiBFbWl0IHdoZW4gYSBzdWIgbWVudSBpcyBvcGVuZWRcbiAgICovXG4gIEBPdXRwdXQoKVxuICBwdWJsaWMgb3BlblN1Yk1lbnU6IEV2ZW50RW1pdHRlcjxDb250ZXh0TWVudU9wZW5FdmVudDxUPj4gPVxuICAgIG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvKipcbiAgICogRW1pdCB3aGVuIGEgbGVhZiBtZW51IGlzIGNsb3NlZFxuICAgKi9cbiAgQE91dHB1dCgpXG4gIHB1YmxpYyBjbG9zZUxlYWZNZW51OiBFdmVudEVtaXR0ZXI8Q29udGV4dE1lbnVDbG9zZUxlYWZFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLyoqXG4gICAqIEVtaXQgd2hlbiBzdWIgbWVudXMgYXJlIGNsb3NlZFxuICAgKi9cbiAgQE91dHB1dCgpXG4gIHB1YmxpYyBjbG9zZVN1Yk1lbnVzOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLyoqXG4gICAqIEVtaXQgd2hlbiBhbGwgbWVudXMgaXMgY2xvc2VkXG4gICAqL1xuICBAT3V0cHV0KClcbiAgcHVibGljIGNsb3NlQWxsTWVudXM6IEV2ZW50RW1pdHRlcjx7XG4gICAgZXZlbnQ6IE1vdXNlRXZlbnQ7XG4gIH0+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIEBWaWV3Q2hpbGRyZW4oJ2xpJylcbiAgcHVibGljIGxpRWxlbWVudFJlZnMhOiBRdWVyeUxpc3Q8RWxlbWVudFJlZj47XG5cbiAgcHJpdmF0ZSBrZXlNYW5hZ2VyITogQWN0aXZlRGVzY2VuZGFudEtleU1hbmFnZXI8Q29udGV4dE1lbnVJdGVtRGlyZWN0aXZlPFQ+PjtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuICAvLyBUT0RPOiBzaG91bGQgYmUgcHJpdmF0ZSBidXQgaXNzdWUgaW4gc3BlYyB3aXRoIE51bGxJbmplY3RvckVycm9yOiBObyBwcm92aWRlciBmb3IgRWxlbWVudFJlZiFcbiAgY29uc3RydWN0b3IocHVibGljIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50Pikge31cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zZXR1cERpcmVjdGl2ZXMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5vdmVybGF5UmVmPy51cGRhdGVQb3NpdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6a2V5ZG93bi5BcnJvd0Rvd24nLCBbJyRldmVudCddKVxuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6a2V5ZG93bi5BcnJvd1VwJywgWyckZXZlbnQnXSlcbiAgcHVibGljIG9uS2V5QXJyb3dEb3duT3JVcChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc0xlYWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmtleU1hbmFnZXIub25LZXlkb3duKGV2ZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzprZXlkb3duLkFycm93UmlnaHQnLCBbJyRldmVudCddKVxuICBwdWJsaWMgb25LZXlBcnJvd1JpZ2h0KGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzTGVhZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmRpciA9PT0gJ3J0bCcpIHtcbiAgICAgIHRoaXMuY2xvc2VBY3RpdmVJdGVtU3ViTWVudShldmVudCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5vcGVuQWN0aXZlSXRlbVN1Yk1lbnUoZXZlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OmtleWRvd24uQXJyb3dMZWZ0JywgWyckZXZlbnQnXSlcbiAgcHVibGljIG9uS2V5QXJyb3dMZWZ0KGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzTGVhZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmRpciA9PT0gJ3J0bCcpIHtcbiAgICAgIHRoaXMub3BlbkFjdGl2ZUl0ZW1TdWJNZW51KGV2ZW50KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNsb3NlQWN0aXZlSXRlbVN1Yk1lbnUoZXZlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OmtleWRvd24uRW50ZXInLCBbJyRldmVudCddKVxuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6a2V5ZG93bi5TcGFjZScsIFsnJGV2ZW50J10pXG4gIHB1YmxpYyBvbktleUVudGVyT3JTcGFjZShldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc0xlYWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMua2V5TWFuYWdlci5hY3RpdmVJdGVtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5vbk1lbnVJdGVtU2VsZWN0KHRoaXMua2V5TWFuYWdlci5hY3RpdmVJdGVtLCBldmVudCk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6a2V5ZG93bi5Fc2NhcGUnLCBbJyRldmVudCddKVxuICBwdWJsaWMgb25LZXlBcnJvd0VzY2FwZShldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc0xlYWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNsb3NlQWN0aXZlSXRlbVN1Yk1lbnUoZXZlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6Y2xpY2snLCBbJyRldmVudCddKVxuICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDpjb250ZXh0bWVudScsIFsnJGV2ZW50J10pXG4gIHB1YmxpYyBvbkNsaWNrT3JSaWdodENsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycgJiYgZXZlbnQuYnV0dG9uID09PSAyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQgYXMgTm9kZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNsb3NlQWxsTWVudXMuZW1pdCh7IGV2ZW50IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHVibGljIHN0b3BFdmVudChldmVudDogTW91c2VFdmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHVibGljIGlzTWVudUl0ZW1EaXNhYmxlZChtZW51SXRlbTogQ29udGV4dE1lbnVJdGVtRGlyZWN0aXZlPFQ+KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGV2YWx1YXRlSWZGdW5jdGlvbihtZW51SXRlbS5kaXNhYmxlZCwgdGhpcy52YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwdWJsaWMgaXNNZW51SXRlbVZpc2libGUobWVudUl0ZW06IENvbnRleHRNZW51SXRlbURpcmVjdGl2ZTxUPik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBldmFsdWF0ZUlmRnVuY3Rpb24obWVudUl0ZW0udmlzaWJsZSwgdGhpcy52YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwdWJsaWMgb25PcGVuU3ViTWVudShcbiAgICBtZW51SXRlbTogQ29udGV4dE1lbnVJdGVtRGlyZWN0aXZlPFQ+LFxuICAgIGV2ZW50OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudFxuICApOiB2b2lkIHtcbiAgICBpZiAoIW1lbnVJdGVtLnN1Yk1lbnUpIHtcbiAgICAgIHRoaXMuY2xvc2VTdWJNZW51cy5uZXh0KCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMua2V5TWFuYWdlci5hY3RpdmVJdGVtSW5kZXggPT09IG51bGwgfHwgIW1lbnVJdGVtLnN1Yk1lbnUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBhbmNob3JFbGVtZW50UmVmID1cbiAgICAgIHRoaXMubGlFbGVtZW50UmVmcy50b0FycmF5KClbdGhpcy5rZXlNYW5hZ2VyLmFjdGl2ZUl0ZW1JbmRleF07XG4gICAgY29uc3QgYW5jaG9yRWxlbWVudCA9IGFuY2hvckVsZW1lbnRSZWYgJiYgYW5jaG9yRWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuXG4gICAgaWYgKGFuY2hvckVsZW1lbnQgJiYgZXZlbnQgaW5zdGFuY2VvZiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICB0aGlzLm9wZW5TdWJNZW51LmVtaXQoe1xuICAgICAgICBhbmNob3JlZFRvOiAnZWxlbWVudCcsXG4gICAgICAgIGFuY2hvckVsZW1lbnQsXG4gICAgICAgIGNvbnRleHRNZW51OiBtZW51SXRlbS5zdWJNZW51LFxuICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgICAgcGFyZW50Q29udGV4dE1lbnU6IHRoaXMsXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIHRoaXMub3BlblN1Yk1lbnUuZW1pdCh7XG4gICAgICAgIGFuY2hvcmVkVG86ICdlbGVtZW50JyxcbiAgICAgICAgYW5jaG9yRWxlbWVudDogZXZlbnQuY3VycmVudFRhcmdldCxcbiAgICAgICAgY29udGV4dE1lbnU6IG1lbnVJdGVtLnN1Yk1lbnUsXG4gICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICBwYXJlbnRDb250ZXh0TWVudTogdGhpcyxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wZW5TdWJNZW51LmVtaXQoe1xuICAgICAgICBhbmNob3JlZFRvOiAncG9zaXRpb24nLFxuICAgICAgICB4OiAoZXZlbnQgYXMgTW91c2VFdmVudCkuY2xpZW50WCxcbiAgICAgICAgeTogKGV2ZW50IGFzIE1vdXNlRXZlbnQpLmNsaWVudFksXG4gICAgICAgIGNvbnRleHRNZW51OiBtZW51SXRlbS5zdWJNZW51LFxuICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHB1YmxpYyBvbk1lbnVJdGVtU2VsZWN0KFxuICAgIG1lbnVJdGVtOiBDb250ZXh0TWVudUl0ZW1EaXJlY3RpdmU8VD4sXG4gICAgZXZlbnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50XG4gICk6IHZvaWQge1xuICAgIHRoaXMuY2FuY2VsRXZlbnQoZXZlbnQpO1xuICAgIHRoaXMub25PcGVuU3ViTWVudShtZW51SXRlbSwgZXZlbnQpO1xuICAgIGlmICghbWVudUl0ZW0uc3ViTWVudSkge1xuICAgICAgdGhpcy50cmlnZ2VyRXhlY3V0ZShtZW51SXRlbSwgZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdHJpZ2dlckV4ZWN1dGUoXG4gICAgbWVudUl0ZW06IENvbnRleHRNZW51SXRlbURpcmVjdGl2ZTxUPixcbiAgICBldmVudDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnRcbiAgKTogdm9pZCB7XG4gICAgbWVudUl0ZW0udHJpZ2dlckV4ZWN1dGUoZXZlbnQsIHRoaXMudmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXR1cERpcmVjdGl2ZXMoKSB7XG4gICAgdGhpcy5tZW51RGlyZWN0aXZlcy5mb3JFYWNoKChtZW51RGlyZWN0aXZlKSA9PiB7XG4gICAgICBtZW51RGlyZWN0aXZlLnZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLmFkZChcbiAgICAgICAgbWVudURpcmVjdGl2ZS5leGVjdXRlLnN1YnNjcmliZSgoZXZlbnQpID0+XG4gICAgICAgICAgdGhpcy5leGVjdXRlLmVtaXQoeyAuLi5ldmVudCwgbWVudURpcmVjdGl2ZSB9KVxuICAgICAgICApXG4gICAgICApO1xuICAgIH0pO1xuICAgIGNvbnN0IHF1ZXJ5TGlzdCA9IG5ldyBRdWVyeUxpc3Q8Q29udGV4dE1lbnVJdGVtRGlyZWN0aXZlPFQ+PigpO1xuICAgIHF1ZXJ5TGlzdC5yZXNldCh0aGlzLm1lbnVEaXJlY3RpdmVzKTtcbiAgICB0aGlzLmtleU1hbmFnZXIgPSBuZXcgVEVTVElOR19XUkFQUEVSLkFjdGl2ZURlc2NlbmRhbnRLZXlNYW5hZ2VyPFxuICAgICAgQ29udGV4dE1lbnVJdGVtRGlyZWN0aXZlPFQ+XG4gICAgPihxdWVyeUxpc3QpLndpdGhXcmFwKCk7XG4gIH1cblxuICBwcml2YXRlIG9wZW5BY3RpdmVJdGVtU3ViTWVudShldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGlmICh0aGlzLmtleU1hbmFnZXIuYWN0aXZlSXRlbUluZGV4ID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jYW5jZWxFdmVudChldmVudCk7XG5cbiAgICBpZiAodGhpcy5rZXlNYW5hZ2VyLmFjdGl2ZUl0ZW0pIHtcbiAgICAgIHRoaXMub25PcGVuU3ViTWVudSh0aGlzLmtleU1hbmFnZXIuYWN0aXZlSXRlbSwgZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2xvc2VBY3RpdmVJdGVtU3ViTWVudShldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGlmICh0aGlzLmtleU1hbmFnZXIuYWN0aXZlSXRlbUluZGV4ID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jYW5jZWxFdmVudChldmVudCk7XG5cbiAgICB0aGlzLmNsb3NlTGVhZk1lbnUuZW1pdCh7XG4gICAgICBleGNsdWRlUm9vdE1lbnU6XG4gICAgICAgIHRoaXMuZGlyID09PSAncnRsJ1xuICAgICAgICAgID8gZXZlbnQua2V5Q29kZSA9PT0gQVJST1dfUklHSFRfS0VZQ09ERVxuICAgICAgICAgIDogZXZlbnQua2V5Q29kZSA9PT0gQVJST1dfTEVGVF9LRVlDT0RFLFxuICAgICAgZXZlbnQsXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNhbmNlbEV2ZW50KGV2ZW50PzogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoIWV2ZW50IHx8ICFldmVudC50YXJnZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgaWYgKFxuICAgICAgWydJTlBVVCcsICdURVhUQVJFQScsICdTRUxFQ1QnXS5pbmNsdWRlcyh0YXJnZXQudGFnTmFtZSkgfHxcbiAgICAgIHRhcmdldC5pc0NvbnRlbnRFZGl0YWJsZVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJuZ3gtY29udGV4dG1lbnVcIiBbbmdDbGFzc109XCJtZW51Q2xhc3NcIiBbYXR0ci5kaXJdPVwiZGlyXCI+XG4gIDx1bCAjbWVudSBjbGFzcz1cIm5neC1jb250ZXh0bWVudS0tZHJvcGRvd24tbWVudVwiIHJvbGU9XCJtZW51XCIgdGFiaW5kZXg9XCIwXCI+XG4gICAgPGxpXG4gICAgICAjbGlcbiAgICAgICpuZ0Zvcj1cImxldCBtZW51RGlyZWN0aXZlIG9mIG1lbnVEaXJlY3RpdmVzOyBsZXQgaSA9IGluZGV4XCJcbiAgICAgIFtjbGFzcy5kaXNhYmxlZF09XCJpc01lbnVJdGVtRGlzYWJsZWQobWVudURpcmVjdGl2ZSlcIlxuICAgICAgW2NsYXNzLmRpdmlkZXJdPVwibWVudURpcmVjdGl2ZS5kaXZpZGVyXCJcbiAgICAgIFtjbGFzcy5hY3RpdmVdPVwiXG4gICAgICAgIG1lbnVEaXJlY3RpdmUuaXNBY3RpdmUgJiYgIWlzTWVudUl0ZW1EaXNhYmxlZChtZW51RGlyZWN0aXZlKVxuICAgICAgXCJcbiAgICAgIFthdHRyLnJvbGVdPVwibWVudURpcmVjdGl2ZS5kaXZpZGVyID8gJ3NlcGFyYXRvcicgOiB1bmRlZmluZWRcIlxuICAgICAgcm9sZT1cIm5vbmVcIlxuICAgID5cbiAgICAgIDxociAqbmdJZj1cIm1lbnVEaXJlY3RpdmUuZGl2aWRlclwiIHJvbGU9XCJzZXBhcmF0b3JcIiAvPlxuICAgICAgPGJ1dHRvblxuICAgICAgICAqbmdJZj1cIiFtZW51RGlyZWN0aXZlLmRpdmlkZXIgJiYgIW1lbnVEaXJlY3RpdmUucGFzc2l2ZVwiXG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICByb2xlPVwibWVudWl0ZW1cIlxuICAgICAgICBjbGFzcz1cIm5neC1jb250ZXh0bWVudS0taXRlbS1jb250ZW50XCJcbiAgICAgICAgW2F0dHIuYXJpYS1oYXNwb3B1cF09XCIhIW1lbnVEaXJlY3RpdmUuc3ViTWVudVwiXG4gICAgICAgIFtjbGFzcy5uZ3gtY29udGV4dG1lbnUtLXBhcmVudC1tZW51XT1cIiEhbWVudURpcmVjdGl2ZS5zdWJNZW51XCJcbiAgICAgICAgW2NsYXNzLmFjdGl2ZV09XCJcbiAgICAgICAgICBtZW51RGlyZWN0aXZlLmlzQWN0aXZlICYmICFpc01lbnVJdGVtRGlzYWJsZWQobWVudURpcmVjdGl2ZSlcbiAgICAgICAgXCJcbiAgICAgICAgW2NsYXNzLmRpc2FibGVkXT1cImlzTWVudUl0ZW1EaXNhYmxlZChtZW51RGlyZWN0aXZlKVwiXG4gICAgICAgIFthdHRyLmRpc2FibGVkXT1cImlzTWVudUl0ZW1EaXNhYmxlZChtZW51RGlyZWN0aXZlKSA/ICdkaXNhYmxlZCcgOiBudWxsXCJcbiAgICAgICAgKGNsaWNrKT1cIm9uTWVudUl0ZW1TZWxlY3QobWVudURpcmVjdGl2ZSwgJGV2ZW50KVwiXG4gICAgICAgIChtb3VzZWVudGVyKT1cIm9uT3BlblN1Yk1lbnUobWVudURpcmVjdGl2ZSwgJGV2ZW50KVwiXG4gICAgICA+XG4gICAgICAgIDxuZy10ZW1wbGF0ZVxuICAgICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0XT1cIm1lbnVEaXJlY3RpdmUudGVtcGxhdGVcIlxuICAgICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7IGl0ZW06IHZhbHVlIH1cIlxuICAgICAgICA+PC9uZy10ZW1wbGF0ZT5cbiAgICAgIDwvYnV0dG9uPlxuXG4gICAgICA8c3BhblxuICAgICAgICAqbmdJZj1cIiFtZW51RGlyZWN0aXZlLmRpdmlkZXIgJiYgbWVudURpcmVjdGl2ZS5wYXNzaXZlXCJcbiAgICAgICAgY2xhc3M9XCJuZ3gtY29udGV4dG1lbnUtLWl0ZW0tY29udGVudCBuZ3gtY29udGV4dG1lbnUtLWl0ZW0tY29udGVudC1wYXNzaXZlXCJcbiAgICAgICAgcm9sZT1cIm1lbnVpdGVtXCJcbiAgICAgICAgKGNsaWNrKT1cInN0b3BFdmVudCgkZXZlbnQpXCJcbiAgICAgICAgKGNvbnRleHRtZW51KT1cInN0b3BFdmVudCgkZXZlbnQpXCJcbiAgICAgICAgW2NsYXNzLmRpc2FibGVkXT1cImlzTWVudUl0ZW1EaXNhYmxlZChtZW51RGlyZWN0aXZlKVwiXG4gICAgICA+XG4gICAgICAgIDxuZy10ZW1wbGF0ZVxuICAgICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0XT1cIm1lbnVEaXJlY3RpdmUudGVtcGxhdGVcIlxuICAgICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7IGl0ZW06IHZhbHVlIH1cIlxuICAgICAgICA+PC9uZy10ZW1wbGF0ZT5cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2xpPlxuICA8L3VsPlxuPC9kaXY+XG4iXX0=