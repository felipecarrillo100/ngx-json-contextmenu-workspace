import { Directive, EventEmitter, Input, Optional, Output, } from '@angular/core';
import { evaluateIfFunction } from '../../helper/evaluate';
import * as i0 from "@angular/core";
export class ContextMenuItemDirective {
    /**
     * Is this menu item disabled
     */
    set disabled(disabled) {
        this.#disabled = disabled;
    }
    get disabled() {
        return (this.passive ||
            this.divider ||
            evaluateIfFunction(this.#disabled, this.value));
    }
    #disabled;
    constructor(template) {
        this.template = template;
        /**
         * True to make this menu item a divider
         */
        this.divider = false;
        /**
         * Is this menu item passive (for title)
         */
        this.passive = false;
        /**
         * Is this menu item visible
         */
        this.visible = true;
        /**
         * Emits event and item
         */
        this.execute = new EventEmitter();
        /**
         * @internal
         */
        this.isActive = false;
        this.#disabled = false;
    }
    setActiveStyles() {
        this.isActive = true;
    }
    setInactiveStyles() {
        this.isActive = false;
    }
    /**
     * @internal
     */
    triggerExecute(event, value) {
        if (evaluateIfFunction(this.#disabled, value)) {
            return;
        }
        this.execute.emit({ event, value });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ContextMenuItemDirective, deps: [{ token: i0.TemplateRef, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.0", type: ContextMenuItemDirective, selector: "[contextMenuItem]", inputs: { subMenu: "subMenu", divider: "divider", disabled: "disabled", passive: "passive", visible: "visible" }, outputs: { execute: "execute" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ContextMenuItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[contextMenuItem]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { subMenu: [{
                type: Input
            }], divider: [{
                type: Input
            }], disabled: [{
                type: Input
            }], passive: [{
                type: Input
            }], visible: [{
                type: Input
            }], execute: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1tZW51LWl0ZW0uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWNvbnRleHRtZW51L3NyYy9saWIvZGlyZWN0aXZlcy9jb250ZXh0LW1lbnUtaXRlbS9jb250ZXh0LW1lbnUtaXRlbS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUNMLFFBQVEsRUFDUixNQUFNLEdBRVAsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBSzNELE1BQU0sT0FBTyx3QkFBd0I7SUFhbkM7O09BRUc7SUFDSCxJQUNXLFFBQVEsQ0FBQyxRQUE0QztRQUM5RCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2pCLE9BQU8sQ0FDTCxJQUFJLENBQUMsT0FBTztZQUNaLElBQUksQ0FBQyxPQUFPO1lBQ1osa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQy9DLENBQUM7SUFDSixDQUFDO0lBaUNELFNBQVMsQ0FBNkM7SUFFdEQsWUFFUyxRQUFrQztRQUFsQyxhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQXpEM0M7O1dBRUc7UUFFSSxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBa0J2Qjs7V0FFRztRQUVJLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFFdkI7O1dBRUc7UUFFSSxZQUFPLEdBQXVDLElBQUksQ0FBQztRQUUxRDs7V0FFRztRQUVJLFlBQU8sR0FHVCxJQUFJLFlBQVksRUFBRSxDQUFDO1FBT3hCOztXQUVHO1FBQ0ksYUFBUSxHQUFHLEtBQUssQ0FBQztRQUV4QixjQUFTLEdBQXVDLEtBQUssQ0FBQztJQUtuRCxDQUFDO0lBRUcsZUFBZTtRQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztJQUN2QixDQUFDO0lBRU0saUJBQWlCO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7T0FFRztJQUNJLGNBQWMsQ0FBQyxLQUFpQyxFQUFFLEtBQVM7UUFDaEUsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQzdDLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs4R0FwRlUsd0JBQXdCO2tHQUF4Qix3QkFBd0I7OzJGQUF4Qix3QkFBd0I7a0JBSHBDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtpQkFDOUI7OzBCQWdFSSxRQUFROzRDQTFESixPQUFPO3NCQURiLEtBQUs7Z0JBT0MsT0FBTztzQkFEYixLQUFLO2dCQU9LLFFBQVE7c0JBRGxCLEtBQUs7Z0JBaUJDLE9BQU87c0JBRGIsS0FBSztnQkFPQyxPQUFPO3NCQURiLEtBQUs7Z0JBT0MsT0FBTztzQkFEYixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGlnaGxpZ2h0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT3B0aW9uYWwsXG4gIE91dHB1dCxcbiAgVGVtcGxhdGVSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udGV4dE1lbnVDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2NvbnRleHQtbWVudS9jb250ZXh0LW1lbnUuY29tcG9uZW50JztcbmltcG9ydCB7IGV2YWx1YXRlSWZGdW5jdGlvbiB9IGZyb20gJy4uLy4uL2hlbHBlci9ldmFsdWF0ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjb250ZXh0TWVudUl0ZW1dJyxcbn0pXG5leHBvcnQgY2xhc3MgQ29udGV4dE1lbnVJdGVtRGlyZWN0aXZlPFQ+IGltcGxlbWVudHMgSGlnaGxpZ2h0YWJsZSB7XG4gIC8qKlxuICAgKiBPcHRpb25hbCBzdWJNZW51IGNvbXBvbmVudCByZWZcbiAgICovXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzdWJNZW51PzogQ29udGV4dE1lbnVDb21wb25lbnQ8VD47XG5cbiAgLyoqXG4gICAqIFRydWUgdG8gbWFrZSB0aGlzIG1lbnUgaXRlbSBhIGRpdmlkZXJcbiAgICovXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBkaXZpZGVyID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIElzIHRoaXMgbWVudSBpdGVtIGRpc2FibGVkXG4gICAqL1xuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IGRpc2FibGVkKGRpc2FibGVkOiBib29sZWFuIHwgKCh2YWx1ZT86IFQpID0+IGJvb2xlYW4pKSB7XG4gICAgdGhpcy4jZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMucGFzc2l2ZSB8fFxuICAgICAgdGhpcy5kaXZpZGVyIHx8XG4gICAgICBldmFsdWF0ZUlmRnVuY3Rpb24odGhpcy4jZGlzYWJsZWQsIHRoaXMudmFsdWUpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJcyB0aGlzIG1lbnUgaXRlbSBwYXNzaXZlIChmb3IgdGl0bGUpXG4gICAqL1xuICBASW5wdXQoKVxuICBwdWJsaWMgcGFzc2l2ZSA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBJcyB0aGlzIG1lbnUgaXRlbSB2aXNpYmxlXG4gICAqL1xuICBASW5wdXQoKVxuICBwdWJsaWMgdmlzaWJsZTogYm9vbGVhbiB8ICgodmFsdWU/OiBUKSA9PiBib29sZWFuKSA9IHRydWU7XG5cbiAgLyoqXG4gICAqIEVtaXRzIGV2ZW50IGFuZCBpdGVtXG4gICAqL1xuICBAT3V0cHV0KClcbiAgcHVibGljIGV4ZWN1dGU6IEV2ZW50RW1pdHRlcjx7XG4gICAgZXZlbnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50O1xuICAgIHZhbHVlPzogVDtcbiAgfT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHVibGljIHZhbHVlPzogVDtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwdWJsaWMgaXNBY3RpdmUgPSBmYWxzZTtcblxuICAjZGlzYWJsZWQ6IGJvb2xlYW4gfCAoKHZhbHVlPzogVCkgPT4gYm9vbGVhbikgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKVxuICAgIHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8eyBpdGVtOiBUIH0+XG4gICkge31cblxuICBwdWJsaWMgc2V0QWN0aXZlU3R5bGVzKCk6IHZvaWQge1xuICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xuICB9XG5cbiAgcHVibGljIHNldEluYWN0aXZlU3R5bGVzKCk6IHZvaWQge1xuICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHB1YmxpYyB0cmlnZ2VyRXhlY3V0ZShldmVudDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQsIHZhbHVlPzogVCk6IHZvaWQge1xuICAgIGlmIChldmFsdWF0ZUlmRnVuY3Rpb24odGhpcy4jZGlzYWJsZWQsIHZhbHVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZXhlY3V0ZS5lbWl0KHsgZXZlbnQsIHZhbHVlIH0pO1xuICB9XG59XG4iXX0=