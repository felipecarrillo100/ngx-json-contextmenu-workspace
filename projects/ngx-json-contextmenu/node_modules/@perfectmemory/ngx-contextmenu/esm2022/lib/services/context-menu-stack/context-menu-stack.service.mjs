import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class ContextMenuStackService {
    constructor() {
        this.stack = [];
    }
    /**
     * Add an item to the stack
     */
    push(value) {
        this.stack.push(value);
    }
    /**
     * Return the stack size
     */
    size() {
        return this.stack.length;
    }
    /**
     * Return true if the stack is empty
     */
    isEmpty() {
        return this.size() === 0;
    }
    /**
     * Clear the whole stack
     */
    closeAll() {
        this.stack.forEach((item) => this.dispose(item));
        this.stack = [];
    }
    /**
     * Detach and dispose sub menu's overlays of the given ContextMenuContentComponent
     */
    destroySubMenus(contextMenu) {
        if (!contextMenu) {
            return;
        }
        const index = this.stack.findIndex(({ overlayRef }) => overlayRef === contextMenu.overlayRef);
        this.stack.slice(index + 1).forEach((item) => {
            this.dispose(item);
        });
    }
    /**
     * Destroy leaf menu and return true if the destroyed menu is the root
     */
    closeLeafMenu(excludeRootMenu) {
        const item = this.disposeLastDetached();
        if (!item) {
            return false;
        }
        const moreThanOneItem = this.size() > 1;
        const isNotEmptyAndDoesNotExcludeRootMenu = !excludeRootMenu && !this.isEmpty();
        if (moreThanOneItem || isNotEmptyAndDoesNotExcludeRootMenu) {
            this.dispose(item);
        }
        if (isNotEmptyAndDoesNotExcludeRootMenu) {
            return true;
        }
        const newValue = this.disposeLastDetached();
        if (newValue) {
            newValue.contextMenuContentComponent.isLeaf = true;
        }
        return false;
    }
    /**
     * Starting by most recent items, dispose all detached item and return the most recent attached one
     */
    disposeLastDetached() {
        let item = this.last();
        if (!item) {
            return;
        }
        while (item &&
            this.size() > 1 &&
            item.overlayRef &&
            this.isDetached(item)) {
            this.dispose(item);
            this.pop();
            item = this.last();
        }
        return item;
    }
    last() {
        if (this.isEmpty()) {
            return;
        }
        return this.stack[this.stack.length - 1];
    }
    pop() {
        const value = this.stack.pop();
        return this.dispose(value);
    }
    isDetached(item) {
        return !item.overlayRef.hasAttached();
    }
    dispose(item) {
        if (item) {
            item.overlayRef.detach();
            item.overlayRef.dispose();
        }
        return item;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ContextMenuStackService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ContextMenuStackService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ContextMenuStackService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1tZW51LXN0YWNrLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtY29udGV4dG1lbnUvc3JjL2xpYi9zZXJ2aWNlcy9jb250ZXh0LW1lbnUtc3RhY2svY29udGV4dC1tZW51LXN0YWNrLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFXM0MsTUFBTSxPQUFPLHVCQUF1QjtJQUhwQztRQUlVLFVBQUssR0FBOEIsRUFBRSxDQUFDO0tBZ0kvQztJQTlIQzs7T0FFRztJQUNJLElBQUksQ0FBQyxLQUE4QjtRQUN4QyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQ7O09BRUc7SUFDSSxJQUFJO1FBQ1QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUMzQixDQUFDO0lBRUQ7O09BRUc7SUFDSSxPQUFPO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRDs7T0FFRztJQUNJLFFBQVE7UUFDYixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7T0FFRztJQUNJLGVBQWUsQ0FBQyxXQUEyQztRQUNoRSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hCLE9BQU87U0FDUjtRQUVELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUNoQyxDQUFDLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxDQUFDLFVBQVUsS0FBSyxXQUFXLENBQUMsVUFBVSxDQUMxRCxDQUFDO1FBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxhQUFhLENBQUMsZUFBd0I7UUFDM0MsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFFeEMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sbUNBQW1DLEdBQ3ZDLENBQUMsZUFBZSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXRDLElBQUksZUFBZSxJQUFJLG1DQUFtQyxFQUFFO1lBQzFELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDcEI7UUFFRCxJQUFJLG1DQUFtQyxFQUFFO1lBQ3ZDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUU1QyxJQUFJLFFBQVEsRUFBRTtZQUNaLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQ3BEO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7O09BRUc7SUFDSyxtQkFBbUI7UUFDekIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRXZCLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxPQUFPO1NBQ1I7UUFFRCxPQUNFLElBQUk7WUFDSixJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQztZQUNmLElBQUksQ0FBQyxVQUFVO1lBQ2YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFDckI7WUFDQSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNYLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDcEI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTyxJQUFJO1FBQ1YsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDbEIsT0FBTztTQUNSO1FBRUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFTyxHQUFHO1FBQ1QsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMvQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVPLFVBQVUsQ0FBQyxJQUE2QjtRQUM5QyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0lBRU8sT0FBTyxDQUNiLElBQXlDO1FBRXpDLElBQUksSUFBSSxFQUFFO1lBQ1IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQzNCO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzhHQWhJVSx1QkFBdUI7a0hBQXZCLHVCQUF1QixjQUZ0QixNQUFNOzsyRkFFUCx1QkFBdUI7a0JBSG5DLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3ZlcmxheVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRleHRNZW51Q29udGVudENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvY29udGV4dC1tZW51LWNvbnRlbnQvY29udGV4dC1tZW51LWNvbnRlbnQuY29tcG9uZW50JztcblxuZXhwb3J0IGludGVyZmFjZSBDb250ZXh0TWVudVN0YWNrSXRlbTxUPiB7XG4gIG92ZXJsYXlSZWY6IE92ZXJsYXlSZWY7XG4gIGNvbnRleHRNZW51Q29udGVudENvbXBvbmVudDogQ29udGV4dE1lbnVDb250ZW50Q29tcG9uZW50PFQ+O1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQ29udGV4dE1lbnVTdGFja1NlcnZpY2U8VD4ge1xuICBwcml2YXRlIHN0YWNrOiBDb250ZXh0TWVudVN0YWNrSXRlbTxUPltdID0gW107XG5cbiAgLyoqXG4gICAqIEFkZCBhbiBpdGVtIHRvIHRoZSBzdGFja1xuICAgKi9cbiAgcHVibGljIHB1c2godmFsdWU6IENvbnRleHRNZW51U3RhY2tJdGVtPFQ+KSB7XG4gICAgdGhpcy5zdGFjay5wdXNoKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHN0YWNrIHNpemVcbiAgICovXG4gIHB1YmxpYyBzaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuc3RhY2subGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0cnVlIGlmIHRoZSBzdGFjayBpcyBlbXB0eVxuICAgKi9cbiAgcHVibGljIGlzRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc2l6ZSgpID09PSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIHRoZSB3aG9sZSBzdGFja1xuICAgKi9cbiAgcHVibGljIGNsb3NlQWxsKCk6IHZvaWQge1xuICAgIHRoaXMuc3RhY2suZm9yRWFjaCgoaXRlbSkgPT4gdGhpcy5kaXNwb3NlKGl0ZW0pKTtcbiAgICB0aGlzLnN0YWNrID0gW107XG4gIH1cblxuICAvKipcbiAgICogRGV0YWNoIGFuZCBkaXNwb3NlIHN1YiBtZW51J3Mgb3ZlcmxheXMgb2YgdGhlIGdpdmVuIENvbnRleHRNZW51Q29udGVudENvbXBvbmVudFxuICAgKi9cbiAgcHVibGljIGRlc3Ryb3lTdWJNZW51cyhjb250ZXh0TWVudTogQ29udGV4dE1lbnVDb250ZW50Q29tcG9uZW50PFQ+KTogdm9pZCB7XG4gICAgaWYgKCFjb250ZXh0TWVudSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5zdGFjay5maW5kSW5kZXgoXG4gICAgICAoeyBvdmVybGF5UmVmIH0pID0+IG92ZXJsYXlSZWYgPT09IGNvbnRleHRNZW51Lm92ZXJsYXlSZWZcbiAgICApO1xuICAgIHRoaXMuc3RhY2suc2xpY2UoaW5kZXggKyAxKS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICB0aGlzLmRpc3Bvc2UoaXRlbSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveSBsZWFmIG1lbnUgYW5kIHJldHVybiB0cnVlIGlmIHRoZSBkZXN0cm95ZWQgbWVudSBpcyB0aGUgcm9vdFxuICAgKi9cbiAgcHVibGljIGNsb3NlTGVhZk1lbnUoZXhjbHVkZVJvb3RNZW51OiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaXRlbSA9IHRoaXMuZGlzcG9zZUxhc3REZXRhY2hlZCgpO1xuXG4gICAgaWYgKCFpdGVtKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgbW9yZVRoYW5PbmVJdGVtID0gdGhpcy5zaXplKCkgPiAxO1xuICAgIGNvbnN0IGlzTm90RW1wdHlBbmREb2VzTm90RXhjbHVkZVJvb3RNZW51ID1cbiAgICAgICFleGNsdWRlUm9vdE1lbnUgJiYgIXRoaXMuaXNFbXB0eSgpO1xuXG4gICAgaWYgKG1vcmVUaGFuT25lSXRlbSB8fCBpc05vdEVtcHR5QW5kRG9lc05vdEV4Y2x1ZGVSb290TWVudSkge1xuICAgICAgdGhpcy5kaXNwb3NlKGl0ZW0pO1xuICAgIH1cblxuICAgIGlmIChpc05vdEVtcHR5QW5kRG9lc05vdEV4Y2x1ZGVSb290TWVudSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzLmRpc3Bvc2VMYXN0RGV0YWNoZWQoKTtcblxuICAgIGlmIChuZXdWYWx1ZSkge1xuICAgICAgbmV3VmFsdWUuY29udGV4dE1lbnVDb250ZW50Q29tcG9uZW50LmlzTGVhZiA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0aW5nIGJ5IG1vc3QgcmVjZW50IGl0ZW1zLCBkaXNwb3NlIGFsbCBkZXRhY2hlZCBpdGVtIGFuZCByZXR1cm4gdGhlIG1vc3QgcmVjZW50IGF0dGFjaGVkIG9uZVxuICAgKi9cbiAgcHJpdmF0ZSBkaXNwb3NlTGFzdERldGFjaGVkKCk6IENvbnRleHRNZW51U3RhY2tJdGVtPFQ+IHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgaXRlbSA9IHRoaXMubGFzdCgpO1xuXG4gICAgaWYgKCFpdGVtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2hpbGUgKFxuICAgICAgaXRlbSAmJlxuICAgICAgdGhpcy5zaXplKCkgPiAxICYmXG4gICAgICBpdGVtLm92ZXJsYXlSZWYgJiZcbiAgICAgIHRoaXMuaXNEZXRhY2hlZChpdGVtKVxuICAgICkge1xuICAgICAgdGhpcy5kaXNwb3NlKGl0ZW0pO1xuICAgICAgdGhpcy5wb3AoKTtcbiAgICAgIGl0ZW0gPSB0aGlzLmxhc3QoKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cblxuICBwcml2YXRlIGxhc3QoKTogQ29udGV4dE1lbnVTdGFja0l0ZW08VD4gfCB1bmRlZmluZWQge1xuICAgIGlmICh0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gIH1cblxuICBwcml2YXRlIHBvcCgpOiBDb250ZXh0TWVudVN0YWNrSXRlbTxUPiB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLnN0YWNrLnBvcCgpO1xuICAgIHJldHVybiB0aGlzLmRpc3Bvc2UodmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0RldGFjaGVkKGl0ZW06IENvbnRleHRNZW51U3RhY2tJdGVtPFQ+KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICFpdGVtLm92ZXJsYXlSZWYuaGFzQXR0YWNoZWQoKTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcG9zZShcbiAgICBpdGVtOiBDb250ZXh0TWVudVN0YWNrSXRlbTxUPiB8IHVuZGVmaW5lZFxuICApOiBDb250ZXh0TWVudVN0YWNrSXRlbTxUPiB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIGl0ZW0ub3ZlcmxheVJlZi5kZXRhY2goKTtcbiAgICAgIGl0ZW0ub3ZlcmxheVJlZi5kaXNwb3NlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cbn1cbiJdfQ==